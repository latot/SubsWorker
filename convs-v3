#!/bin/bash
set -e

echo "Working!!!"

bds2s=$(dirname "$(readlink -f "$0")")/BDSup2Sub.jar
sub="/tmp/tmp.srt"

#S_TEXT/UTF8 -> srt
#SSA/ASS -> ass (file)
#S_TEXT/ASS -> ass
#S_HDMV/PGS -> bd2s2
#SRT -> srt (file)
#PGS -> bd2s2 (file)
#S_TEXT/SSA -> ass


original_sub=""
high_video=""
synced_sub=""
out_video=""
delay=""

function check_file {

if [[ ! -f "$1" ]]; then
echo "$1 no exist: $2"
exit
fi

}

check_file "$bds2s" "BDSup2Sub"

while true ; do
	case "$1" in
		-is | --input_subtitle )
			check_file "$2" "Input subtitle"
			original_sub="$2"
			shift 2
			;;
		-iv | --input_video )
			check_file "$2" "Input video"
			high_video="$2"
			shift 2
			;;
		-iss | --input_synced_subtitle )
			check_file "$2" "Input subtitle synced"
			synced_sub="$2"
			shift 2
			;;
		-o | --output )
			out_video="$2"
			shift 2
			;;
		-d | --delay )
			delay="$2"
			shift 2
			;;
		-- )
			shift
			break
			;;
		* )
			break
			;;
	esac
done

if [[ "$high_video" == "" ]]; then
	high_video = synced_sub
fi

function load {

mkvmerge -i "$1" > /tmp/data

if [[ ! -f /tmp/data ]];then
  echo "problem, data file can't be created "
  exit
fi

data='cat /tmp/data'
data_s=$(${data} | grep subtitles)

if [ -z "${data_s}" ];then
echo "No subs founded in \"$1\""
exit
fi

cont=$(${data} | awk -F'contenedor: ' '{print $2;exit}')
pista=$(echo "$data_s" | awk -F'[:]' '{print $1}' | awk '{print $(NF)}')
tipo=$(echo "$data_s" | awk -F'[()]' '{print $2}')

#primera pista
pista=$(echo "$pista" | awk '{print $1}')

#if [[ $tipo == "S_TEXT/UTF8" || $tipo == "S_TEXT/ASS" || $tipo == "S_HDMV/PGS" || $tipo == "HDMV PGS" || $tipo == "S_TEXT/SSA" ]]; then

if [[ $cont == "Matroska" ]];then
mkvextract tracks "$1" "$pista":"$sub" > /dev/null
#mkvextract tracks "$1" $pista:$sub > /tmp/mkvmerge
echo "$1" > /tmp/file
#read x
##else if
else
cp "$1" "$sub"
fi

case "$tipo" in

'S_TEXT/UTF8'|'SRT'|'SubRip/SRT')
grep -aE -A 1 --no-group-separator '^[0-9]{1,2}:[0-9]{2}:[0-9]{2},[0-9]{1,3} --> [0-9]{1,2}:[0-9]{2}:[0-9]{2},[0-9]{1,3}' "$sub" | awk 'BEGIN{a=1}{key=$1; getline; print a ";" key ";" $0;a=a+1}' > /tmp/tmp2
mv /tmp/tmp2 "$sub"
;;

'SSA/ASS'|'S_TEXT/ASS'|'S_TEXT/SSA'|'SubStationAlpha'|'SubStationAlpha')
grep "Dialogue:" "$sub" | awk -F, '{print $2";"substr($0, index($0,$10))}' | sort | awk -F";" 'BEGIN{n=1}{if($2!= ""){print n";"$1";"$2;n=n+1}}' > /tmp/tmp2
mv /tmp/tmp2 "$sub"
;;

'S_HDMV/PGS'|'HDMV PGS')
java -jar "$bds2s" "$sub" -v -o /tmp/tmp.sup | awk -F'[<> ()]' '{if($1=="#")print $3";"$5}' > /tmp/tmp2
mv /tmp/tmp2 "$sub"
;;

*)
echo "No format supported - \"$tipo\" in \"$1\""
exit
;;
esac

t=$(awk -F';' '{split($2,a,":");if(a[3]+a[2]*60+a[1]*60*60>0){print $2;exit}}' "$sub")

mv "$sub" "$2"
eval "$3"'='"$pista"
eval "$4"'='"$t"

}

load "$file1" "/tmp/t1" "p1" "t1"
load "$file2" "/tmp/t2" "p2" "t2"

s1=$(echo "$t1" | awk '{split($1,a,":"); print a[3]+a[2]*60+a[1]*60*60;exit}')
s2=$(echo "$t2" | awk '{split($1,a,":"); print a[3]+a[2]*60+a[1]*60*60;exit}')

d=$(python -c "print(float('{0:.3f}'.format($s2-$s1))*1000)")

if [[ $(python -c "if ($d>=$delay) or ($d<=-$delay):print(0)") ]]; then
#if [[ 1 ]]; then

echo "$file1"
echo "$file2"
echo "$file3"
echo "$d"

echo -e "Warning diference up 2s\nCheck (y/n/q):"

read -r x
if [ "$x" == "y" ]; then

gnome-terminal -x sh -c "awk 'BEGIN{print \"File 1\"}{print \$0}' /tmp/t1 | sed 's/;/ - /g' | less" > /dev/null &

gnome-terminal -x sh -c "awk 'BEGIN{print \"File 2\"}{print \$0}' /tmp/t2 | sed 's/;/ - /g' | less" > /dev/null &

echo -e "\nLinea tiempo 1:"
read -r t1
echo -e "\nLinea tiempo 2:"
read -r t2

t1=$(awk -F';' '{if($1=='"$t1"'){print($2);exit}}' "/tmp/t1")
t2=$(awk -F';' '{if($1=='"$t2"'){print($2);exit}}' "/tmp/t2")


s1=$(echo "$t1" | awk '{split($1,a,":"); print a[3]+a[2]*60+a[1]*60*60;exit}')
s2=$(echo "$t2" | awk '{split($1,a,":"); print a[3]+a[2]*60+a[1]*60*60;exit}')
d=$(python -c "print(float('{0:.3f}'.format($s2-$s1))*1000)")

elif [ "$x" == "q" ]; then
echo -e "Fail\n""$file1""\n""$file2"
exit
fi

fi
echo "$t2"
echo "$t1"
mkvmerge -o "$file4" -A -D -s "$p1" -y "$p1":"$d" --language "$p1":"spa" --track-name "$p1":"Spanish" "$file1" "$file3"
